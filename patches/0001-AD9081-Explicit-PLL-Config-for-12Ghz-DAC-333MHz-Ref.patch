From 80389d76e53a82dd070095cd2d1c3d5ad4b0b304 Mon Sep 17 00:00:00 2001
From: Brent Kowal <brent.kowal@analog.com>
Date: Fri, 10 Jan 2025 12:00:33 -0500
Subject: [PATCH] AD9081 Explicit PLL Config for 12Ghz DAC/333MHz Ref

Due to integer math, the algorithm to calculate the PLL
divisors to meet the DAC and Ref clock constraints does
not resolve to a valid solution for the 12GHz/333MHz
combinations due to the repeating decimal components of
333MHz (333333333.3333~Hz) needed for the math to work
out.

This modification adds an explicit case for 12GHz/333MHz
to set N=8, M=9, R=2 and bypass the auto calculation
algorithm.

Signed-off-by: Brent Kowal <brent.kowal@analog.com>
---
 drivers/iio/adc/ad9081/adi_ad9081_device.c | 93 +++++++++++++---------
 1 file changed, 57 insertions(+), 36 deletions(-)

diff --git a/drivers/iio/adc/ad9081/adi_ad9081_device.c b/drivers/iio/adc/ad9081/adi_ad9081_device.c
index 33623d6088cf..5c2222744bdc 100644
--- a/drivers/iio/adc/ad9081/adi_ad9081_device.c
+++ b/drivers/iio/adc/ad9081/adi_ad9081_device.c
@@ -415,50 +415,67 @@ int32_t adi_ad9081_device_clk_pll_startup(adi_ad9081_device_t *device,
 	int32_t err;
 	uint64_t vco_clk_hz, pfd_clk_hz;
 	uint8_t i, total_feedback;
+	uint8_t auto_calc = 1;
 	uint8_t ref_div = 1, n_div = 1, m_div = 1, pll_div = 1, fb_div = 1;
 	uint8_t n_div_vals[] = { 5, 7, 8, 11 };
 	AD9081_NULL_POINTER_RETURN(device);
 	AD9081_LOG_FUNC();
 
-	/* find divider */
-	for (ref_div = 1; ref_div <= 4; ref_div++) {
-#ifdef __KERNEL__
-		pfd_clk_hz = div_u64(ref_clk_hz, ref_div);
-#else
-		pfd_clk_hz = ref_clk_hz / ref_div;
-#endif
-		if (pfd_clk_hz > 750000000ULL)
-			continue; /* 25~750MHz */
-
-		for (pll_div = 1; pll_div <= 4; pll_div++) {
-			vco_clk_hz = dac_clk_hz * pll_div;
-			if ((vco_clk_hz < 5800000000ULL) ||
-			    (vco_clk_hz > 12000000000ULL))
-				continue; /* 5.8~12GHz */
-			for (i = 0; i <= 3; i++) {
-				n_div = n_div_vals[i];
-#ifdef __KERNEL__
-				total_feedback =
-					div_u64(vco_clk_hz, pfd_clk_hz);
-#else
-				total_feedback = vco_clk_hz / pfd_clk_hz;
-#endif
-				m_div = total_feedback / n_div;
-				if ((m_div < 2) || (m_div > 50))
-					continue;
-				if ((pfd_clk_hz * n_div * m_div) != vco_clk_hz)
-					continue;
-				break;
+	/* 12GHz DAC and 333MHz (repeating 3's) is a special case, as with the decimal
+	   piece of the ref_clk doesn't allow the integer math to generate the correct
+	   divisors.  In this case, set the divisors manually, and bypass the auto_calc.
+	   This is not the only special case, but is specific to this application
+	*/
+	if ((dac_clk_hz == 12000000000ULL) && (ref_clk_hz == 333333333ULL)) {
+		AD9081_LOG_WARN("Detected 12GHz DAC and 333MHz Ref Clocks. Using fixed PLL values.");
+		auto_calc = 0;
+		m_div = 9;
+		n_div = 8;
+		ref_div = 2;
+		pll_div = 1;
+	}
+
+	if (auto_calc) {
+		/* find divider */
+		for (ref_div = 1; ref_div <= 4; ref_div++) {
+	#ifdef __KERNEL__
+			pfd_clk_hz = div_u64(ref_clk_hz, ref_div);
+	#else
+			pfd_clk_hz = ref_clk_hz / ref_div;
+	#endif
+			if (pfd_clk_hz > 750000000ULL)
+				continue; /* 25~750MHz */
+
+			for (pll_div = 1; pll_div <= 4; pll_div++) {
+				vco_clk_hz = dac_clk_hz * pll_div;
+				if ((vco_clk_hz < 5800000000ULL) ||
+					(vco_clk_hz > 12000000000ULL))
+					continue; /* 5.8~12GHz */
+				for (i = 0; i <= 3; i++) {
+					n_div = n_div_vals[i];
+	#ifdef __KERNEL__
+					total_feedback =
+						div_u64(vco_clk_hz, pfd_clk_hz);
+	#else
+					total_feedback = vco_clk_hz / pfd_clk_hz;
+	#endif
+					m_div = total_feedback / n_div;
+					if ((m_div < 2) || (m_div > 50))
+						continue;
+					if ((pfd_clk_hz * n_div * m_div) != vco_clk_hz)
+						continue;
+					break;
+				}
+				if (i <= 3)
+					break;
 			}
-			if (i <= 3)
+			if (pll_div <= 4)
 				break;
 		}
-		if (pll_div <= 4)
-			break;
-	}
-	if (ref_div == 5) {
-		AD9081_LOG_ERR("Cannot find any settings to lock device PLL.");
-		return API_CMS_ERROR_INVALID_PARAM;
+		if (ref_div == 5) {
+			AD9081_LOG_ERR("Cannot find any settings to lock device PLL.");
+			return API_CMS_ERROR_INVALID_PARAM;
+		}
 	}
 
 	/* calculate fb div */
@@ -470,6 +487,10 @@ int32_t adi_ad9081_device_clk_pll_startup(adi_ad9081_device_t *device,
 		fb_div = 2;
 	else if (n_div == 11)
 		fb_div = 3;
+	else {
+		AD9081_LOG_VAR(ADI_CMS_LOG_ERR, "Invalid n_div set (%d).", n_div);
+		return API_CMS_ERROR_INVALID_PARAM;
+	}
 
 	/* enable pll */
 	err = adi_ad9081_device_clk_pll_enable_set(device, 1);
